<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>窗外蟋蟀 &#39;s Blog</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://perkyrookie.github.io/"/>
  <updated>2018-12-18T11:01:15.935Z</updated>
  <id>https://perkyrookie.github.io/</id>
  
  <author>
    <name>窗外蟋蟀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊希尔排序</title>
    <link href="https://perkyrookie.github.io/PerkyRookie/8ae67b8f/"/>
    <id>https://perkyrookie.github.io/PerkyRookie/8ae67b8f/</id>
    <published>2018-12-17T06:16:07.000Z</published>
    <updated>2018-12-18T11:01:15.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>希尔排序是Donald Shell于1959年提出来的一种排序算法，它是第一批突破$O(n^2)$这个时间复杂度的算法之一。大话数据结构对这个算法的讲解，我看得一知半解的，之后网上找了下资料，发现维基百科对这个算法的讲解非常不错，特在此整理一波。</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p><img src="http://pjs07lvwy.bkt.clouddn.com/Sorting_shellsort_anim.gif" alt=""></p><p>先上个维基百科的动图，不知道你们看不看得懂，反正我不是很懂……</p><p><strong>说说我的个人理解：</strong></p><p>希尔排序其实就是直接插入排序的升级，原理就是先将整个待排序列按照某个增量（也称步长）分割成若干个子序列分别进行直接插入排序，然后合并，之后依次缩小增量大小在进行排序，当增量足够小（通常为1）时，再对全体元素进行直接插入排序，而此时需排序的数据几乎是已排好的了，所以此时插入排序较快。</p><p><strong>当然如果你觉得文字比较乏味就看下面的这些例子吧</strong></p><p>例如，假设有这样一组数<code>[9 1 5 8 3 7 4 6 2]</code>，如果我们先以步长为4进行分割，就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9 1 5 8</span><br><span class="line">3 7 4 6 </span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>然后我们对每列进行排序（注意每列哦）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1 4 6</span><br><span class="line">3 7 5 8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>将上述四行数字，依序合并我们得到：<code>[ 2 1 4 6 3 7 5 8 9 ]</code>。此时2已经往前移，而8、9已经在后两位，然后再以2为步长进行分割：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">4 6</span><br><span class="line">3 7</span><br><span class="line">5 8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>继续排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">3 6</span><br><span class="line">4 7</span><br><span class="line">5 8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>合并得到<code>［ 2 1 3 6 4 7 5 8 9］</code>，此时序列已经基本有序，需交换数据的情况大为减少，这时整列进行直接插入排序效率就非常高。</p><p>最终完成排序过程，也就是步长为1时，得到最终序列为：<code>1 2 3 4 5 6 7 8 9</code>。</p><h1 id="示例代码（C）"><a href="#示例代码（C）" class="headerlink" title="示例代码（C）"></a>示例代码（C）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//用于要排序数组的最大值 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//定义一个顺序表结构 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> r[MAXSIZE+<span class="number">1</span>];<span class="comment">//用于存储要排序数组，r[0]用作哨兵或者临时变量 </span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//用于存储顺序表的最大长度 </span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> gap=L-&gt;length;<span class="comment">//获取数组长度 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(gap/=<span class="number">2</span>;gap&gt;=<span class="number">1</span>;gap/=<span class="number">2</span>)<span class="comment">//步长 </span></span><br><span class="line"><span class="keyword">for</span>(i=gap+<span class="number">1</span>; i&lt;=L-&gt;length; i++)<span class="comment">//从第gap+1个元素开始，因为r[0]被当做临时变量 </span></span><br><span class="line"><span class="keyword">if</span>(L-&gt;r[i] &lt; L-&gt;r[i-gap])<span class="comment">//每个元素与自己组内的数据进行直接插入排序 </span></span><br><span class="line">&#123;</span><br><span class="line">L-&gt;r[<span class="number">0</span>]=L-&gt;r[i];<span class="comment">//把要交换的数据暂存的L-&gt;r[0]中 </span></span><br><span class="line"><span class="keyword">for</span>(j=i-gap; j&gt;<span class="number">0</span>&amp;&amp;L-&gt;r[j] &gt; L-&gt;r[<span class="number">0</span>]; j-=gap)</span><br><span class="line">L-&gt;r[j+gap] = L-&gt;r[j];<span class="comment">//记录后移，查找插入位置 </span></span><br><span class="line"></span><br><span class="line">L-&gt;r[j+gap]=L-&gt;r[<span class="number">0</span>];<span class="comment">//插入 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">39</span>,<span class="number">80</span>,<span class="number">76</span>,<span class="number">41</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">50</span>,<span class="number">78</span>,<span class="number">30</span>,<span class="number">11</span>,<span class="number">100</span>,<span class="number">7</span>,<span class="number">41</span>,<span class="number">86</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    SqList L;</span><br><span class="line">    L.length = <span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);<span class="comment">//获取数组长度 </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">L.r[i+<span class="number">1</span>]=<span class="built_in">array</span>[i];<span class="comment">//把数组存入顺序表结构 </span></span><br><span class="line">&#125;</span><br><span class="line">ShellSort(&amp;L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出排序后的数组 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,L.r[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有几个步骤略难懂，这里解释下：</p><ul><li><p>第17行：这里的步长采用$\frac {n} {2}$,最终判断条件为gap&gt;=1,这里不管你数组初始长度为多少，除到最后均会等于1，而等于1时，就是执行最后一次循环，这个时候也就是所有元素进行直接插入排序。当然也可写成gap&gt;0。</p></li><li><p>第18行：在前面定义顺序表结构时，我们加多了一位，也就是把r[0]当做交换数据时的临时变量。</p></li><li><p>第22~23行：对于这个循环我们直接拿上面的例子中的一列进行讲解<code>（9 3 2）</code>：</p></li></ul><p><img src="http://pjs07lvwy.bkt.clouddn.com/201812181616_801.png" alt=""></p><p>当$i=5$时，9和3进行了一次交换，变为<code>（3 9 2）</code>(位置为1 5 9），之后在$i=9$时$(此时r[0]=r[i]=2)$，做出的交换如上图所示（图略差…)，分为三个步骤：$(gap=4)$</p><ul><li>第一次进入循环$j=i-gap=5,r[j]=r[5]=9&gt;r[0]$，执行23行得$r[j+gap]=r[9]=r[j]=9$，此时该列数值变为<code>(3 9 9)</code>；</li><li>继续第二次循环$j=j-gap=1,r[j]=r[1]=3&gt;r[0]$，同样执行循环$r[j+gap]=r[5]=r[j]=3$，此时变为<code>（3 3 9）</code>；</li><li>跳出循环(注意：跳出循环时多执行了一次$j-=gap=-3​$)，执行$r[j+gap]=r[-3+4]=r[1]=r[0]=2​$，最终变为<code>(2 3 9)</code>。</li></ul><h1 id="步长（增量）选择"><a href="#步长（增量）选择" class="headerlink" title="步长（增量）选择"></a>步长（增量）选择</h1><p>步长的选取非常关键，但是步长的选择没有统一规定，也没绝对的规律。只要满足最后一个步长为1即可。Donald Shell最初建议步长选择为$\frac {n} {2}$,虽然这样去可以比$O(n^2)$类的算法更好，但仍然有减少平均时间和最差时间的余地。维基百科给出的部分步长与最坏情况下复杂度有：</p><p><img src="http://pjs07lvwy.bkt.clouddn.com/Snipaste_2018-12-18_18-41-27.png" alt=""></p><p>已知的最好步长序列是由Sedgewick提出的(1, 5, 19, 41, 109,…)，该序列的项来自$9\times4^i-9\times2^i+1$和$2^{i+2}\times(2^{i+2}-3)+1$这两个算式。这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长序列的希尔排序比插入排序要快，甚至在小数组中比快速排序和堆排序（后续博客整理），但是在涉及大量数据时希尔排序还是比快速排序慢。、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;希尔排序是Donald Shell于1959年提出来的一种排序算法，它是第一批突破$O(n^2)$这个时间复杂度的
      
    
    </summary>
    
    
      <category term="C 排序算法" scheme="https://perkyrookie.github.io/tags/C-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
